"""
Contains util functions for TG analysis
"""

import os
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd
from typing import Tuple
from pathlib import Path

__author__ = "James Wang"
__email__ = "jq.wang1214@gmail.com"


FIG_PATH = "./figs"


def _check_path(dir: str) -> None:
	"""
	Check whether paths exist, if not, create one
	"""
	Path(dir).mkdir(parents=True, exist_ok=True)

def visualize_dist(
		a: np.ndarray, 
		x_label: str="Bins", 
		bins: int=20, 
		fig_path: str=FIG_PATH) -> None:
	"""
	Plot the histrogram of a series of PRNs.

    Parameters
    ----------
    a : np.ndarray
    	target PRNs generated by TG
    x_label: str
    	x axis label
    bins: int
    	number of bins
	"""

	sns_plot = sns.displot(a, x=x_label, bins=bins)
	_check_path(FIG_PATH)
	sns_plot.savefig(f"{FIG_PATH}/dist.png")

def visualize_pattern(
		a: np.ndarray, 
		window: int=1, 
		fig_path: str=FIG_PATH) -> None:
	"""
	Plot the histrogram of a series of PRNs.

    Parameters
    ----------
    a : np.ndarray
    	target PRNs generated by TG
    window: int
    	moving average
	"""
	if window == 1:
		sns_plot = sns.barplot(x=np.arange(len(a)), y=a)
	
	else:
		window_size = window
		moving_averages = []
		# Calculate moving averages
		i = 0
		while i < len(a) - window_size + 1:
			this_window = a[i : i + window_size]
			window_average = sum(this_window) / window_size
			moving_averages.append(window_average)
	    	i += 1

		sns_plot = sns.barplot(x=np.arange(len(a)), y=a)

	_check_path(FIG_PATH)
	sns_plot.savefig(f"{FIG_PATH}/pattern.png")


