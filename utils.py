"""
Contains util functions for TG analysis
"""

from pathlib import Path

import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns

__author__ = "James Wang"
__email__ = "jq.wang@gatech.edu"


FIG_PATH = "./figs"


def _check_path(dir: str) -> None:
    """
    Check whether paths exist, if not, create one
    """
    Path(dir).mkdir(parents=True, exist_ok=True)


def visualize_dist(
    a: np.ndarray, bins: int = 20, filename: str = f"{FIG_PATH}/dist_.png"
) -> None:
    """
    Plot the histrogram of a series of PRNs.

    Parameters
    ----------
    a : np.ndarray
        target PRNs generated by TG
    x_label: str
        x axis label
    bins: int
        number of bins
    """

    sns_plot = sns.displot(a, bins=bins)
    sns_plot.set(xlabel="Bins", ylabel="Count", title=f"{len(a)} PRNs -- Distribution")
    _check_path(FIG_PATH)
    sns_plot.savefig(filename)


def visualize_pattern(
    a: np.ndarray, window: int = 1, filename: str = f"{FIG_PATH}/pattern_.png"
) -> None:
    """
    Plot the histrogram of a series of PRNs.

    Parameters
    ----------
    a : np.ndarray
        target PRNs generated by TG
    window: int
        moving average
    """
    fig, ax = plt.subplots(1, 1, figsize=(20, 4))
    ax.set_xlabel("# PRNs")
    ax.set_ylabel("Values")
    ax.set_title(f"{len(a)} PRNs -- Adjacent PRN")

    if window == 1:
        sns_plot = sns.barplot(x=np.arange(len(a)), y=a, ax=ax)

    else:
        window_size = window
        moving_averages = []
        # Calculate moving averages
        i = 0
        while i < len(a) - window_size + 1:
            this_window = a[i : i + window_size]
            window_average = sum(this_window) / window_size
            moving_averages.append(window_average)
            i += 1

        sns_plot = sns.barplot(x=np.arange(len(a)), y=a, ax=ax)

    # handle x ticks frequency
    x_size = len(sns_plot.get_xticklabels())
    for ind, label in enumerate(sns_plot.get_xticklabels()):
        if ind % (x_size // 10) == 0:  # every 10th label is kept
            label.set_visible(True)
        else:
            label.set_visible(False)

    _check_path(FIG_PATH)
    fig.savefig(filename)
