"""
- Statistical tests on the generator to see whether it gives
  PRN’s that are approximately i.i.d. Uniform(0,1).

- Plot adjacent PRN’s (Ui, Ui+1), i = 1, 2, . . ., on the unit
  square to see if there are any patterns.

- Generate a few Nor(0,1) deviates using Unif(0,1)’s from the
  Tausworthe generator
"""

import sys
from typing import Tuple

import numpy as np
from scipy import stats

from Tausworthe import TG
from utils import FIG_PATH, _check_path, visualize_dist, visualize_pattern

__author__ = "James Wang"
__email__ = "jq.wang@gatech.edu"


def ks(
    a: np.array,
    alpha: float = 0.05,
    name: str = "uniform",
    report_dir: str = "./kstests",
) -> Tuple[float, float]:
    """
    Perform Kolmogorov-Smirnov test for goodness of fit on a given numpy array

    Performs a test of the distribution F(x) of an observed random variable
    against a given distribution G(x). Under the null hypothesis, the two
    distributions are identical, F(x)=G(x).

    Parameters
    ----------
    a : np.ndarray
        target PRNs generated by TG
    alpha: float
        significance level
    name: str
        target distribution, default is Unif(0, 1)
    report_dir: str
        directory of output report
    """
    _check_path(report_dir)
    ks_value, p_value = stats.kstest(a, name)
    if p_value <= alpha / 2:
        # reject H0
        with open(f"{report_dir}/kstest_{name}_{len(a)}.txt", "w") as fo:
            fo.write(
                f"""D statistic (the absolute max distance between the CDFs of the two samples): {ks_value}
p value: {p_value}
alpha: {alpha}

p value <= alpha / 2

We reject H0, the given PRNs are not drawn from {name}(0, 1)"""
            )
    else:
        with open(f"{report_dir}/kstest_{name}_{len(a)}.txt", "w") as fo:
            fo.write(
                f"""D statistic (the absolute max distance between the CDFs of the two samples): {ks_value}
p value: {p_value}
alpha: {alpha}

p value > alpha / 2

We accept H0, the given PRNs are from {name}(0, 1)"""
            )
    return ks_value, p_value


def gen_norm(u: np.ndarray, v: np.ndarray) -> np.ndarray:
    """
    Generate Nro(0, 1) from the TG PRNs.
    Using Box-Muller transform:
        u, v iid ~ uniform(0, 1)
        x = sqrt(-2 * log(u)) * cos(2 * pi * v) ~ Norm(0, 1)

    Parameters
    ----------
    a : np.ndarray
        PRNs generated by TG
    size: int
        size of the generated Norm array
    """

    x = np.sqrt(-2 * np.log(u)) * np.sin(2 * np.pi * v)
    return x


def main() -> None:
    SIZE = 100000

    print(f"Generating {SIZE} PRNs using TG ...", file=sys.stderr, end=" ")
    tg = TG(length=SIZE)
    tg.seed(r=3, q=7, chunk_len=21)
    a = tg.random()
    print("done!", file=sys.stderr)
    print(f"Cycle: {tg.get_cycle()}")

    print("- Kolmogorov-Smirnov test for goodness to fit Uniform(0, 1)")
    ks_value, p_value = ks(a)
    print(f"KS value: {ks_value}; p value: {p_value}")

    print("- Generating a histogram ...", file=sys.stderr, end=" ")
    visualize_dist(a, filename=f"{FIG_PATH}/dist_{SIZE}.png")
    print("done!", file=sys.stderr)

    if SIZE <= 10000:
        print("- Plotting the pattern ...", file=sys.stderr, end=" ")
        visualize_pattern(a, filename=f"{FIG_PATH}/pattern_{SIZE}.png")
        print("done!", file=sys.stderr)

    print("- Generating Norm(0, 1) from our Unif(0, 1) ...", file=sys.stderr, end=" ")
    tg.seed(r=3, q=17, chunk_len=23)
    v = tg.random()
    x = gen_norm(a, v)
    print("done!", file=sys.stderr)
    print(f"Cycle: {tg.get_cycle()}")

    print("- Generating a histogram of this Norm(0, 1)...", file=sys.stderr, end=" ")
    visualize_dist(x, filename=f"{FIG_PATH}/dist_norm_{SIZE}.png")
    print("done!", file=sys.stderr)

    print("- Kolmogorov-Smirnov test for goodness to fit Norm(0, 1)")
    ks_value, p_value = ks(x, name="norm")
    print(f"KS value: {ks_value}; p value: {p_value}")


if __name__ == "__main__":
    main()
